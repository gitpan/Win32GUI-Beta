{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fswiss MS Sans Serif;}{\f1\froman\fcharset2 Symbol;}{\f2\fswiss Arial;}{\f3\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red0\green128\blue0;\red0\green0\blue255;}
\deflang1040\plain\f2
\par
\par\plain\f2\fs36\cf1\li0\b NAME
\par\li400 \plain\f2\fs24 \par\li400 Exporter - Implements default import method for modules 
\par\li400 
\par
\par\plain\f2\fs36\cf1\li0\b SYNOPSIS
\par\li400 \plain\f2\fs24 \par\li400 In module ModuleName.pm: 
\par\li400 
\par\plain\f3   package ModuleName; 
\par   require Exporter; 
\par   @ISA = qw(Exporter); 
\par  
\par \plain\f0 \par\plain\f3   @EXPORT = qw(...);            # symbols to export by default 
\par   @EXPORT_OK = qw(...);         # symbols to export on request 
\par   %EXPORT_TAGS = tag => [...];  # define names for sets of symbols 
\par  
\par \plain\f0 \par\li400 In other files which wish to use ModuleName: 
\par\li400 
\par\plain\f3   use ModuleName;               # import default symbols into my package 
\par  
\par \plain\f0 \par\plain\f3   use ModuleName qw(...);       # import listed symbols into my package 
\par  
\par \plain\f0 \par\plain\f3   use ModuleName ();            # do not import any symbols 
\par  
\par \plain\f0 \par
\par\plain\f2\fs36\cf1\li0\b DESCRIPTION
\par\li400 \plain\f2\fs24 \par\li400 The Exporter module implements a default \plain\f3 import\plain\f0   method which 
many modules choose to inherit rather than implement their own. 
\par\li400 
\par\li400 Perl automatically calls the \plain\f3 import\plain\f0   method when processing a 
\plain\f3 use\plain\f0   statement for a module. Modules and \plain\f3 use\plain\f0   are documented 
in the perlfunc manpage and the perlmod manpage. Understanding the concept of 
modules and how the \plain\f3 use\plain\f0   statement operates is important to 
understanding the Exporter. 
\par\li400 
\par
\par\plain\f2\fs24\cf1\li200\b Selecting What To Export
\par\li400 
\par\plain\f2\fs24 \par\li400 Do \plain\b not\plain   export method names! 
\par\li400 
\par\li400 Do \plain\b not\plain   export anything else by default without a good reason! 
\par\li400 
\par\li400 Exports pollute the namespace of the module user.  If you must export 
try to use @EXPORT_OK in preference to @EXPORT and avoid short or 
common symbol names to reduce the risk of name clashes. 
\par\li400 
\par\li400 Generally anything not exported is still accessible from outside the 
module using the ModuleName::item_name (or $blessed_ref->method) 
syntax.  By convention you can use a leading underscore on names to 
informally indicate that they are 'internal' and not for public use. 
\par\li400 
\par\li400 (It is actually possible to get private functions by saying: 
\par\li400 
\par\plain\f3   my $subref = sub { ... }; 
\par   &$subref; 
\par  
\par \plain\f0 \par\li400 But there's no way to call that directly as a method, since a method 
must have a name in the symbol table.) 
\par\li400 
\par\li400 As a general rule, if the module is trying to be object oriented 
then export nothing. If it's just a collection of functions then 
@EXPORT_OK anything but use @EXPORT with caution. 
\par\li400 
\par\li400 Other module design guidelines can be found in the perlmod manpage. 
\par\li400 
\par
\par\plain\f2\fs24\cf1\li200\b Specialised Import Lists
\par\li400 
\par\plain\f2\fs24 \par\li400 If the first entry in an import list begins with !, : or / then the 
list is treated as a series of specifications which either add to or 
delete from the list of names to import. They are processed left to 
right. Specifications are in the form: 
\par\li400 
\par\plain\f3     [!]name         This name only 
\par     [!]:DEFAULT     All names in @EXPORT 
\par     [!]:tag         All names in $EXPORT_TAGS{tag} anonymous list 
\par     [!]/pattern/    All names in @EXPORT and @EXPORT_OK which match 
\par  
\par \plain\f0 \par\li400 A leading ! indicates that matching names should be deleted from the 
list of names to import.  If the first specification is a deletion it 
is treated as though preceded by :DEFAULT. If you just want to import 
extra names in addition to the default set you will still need to 
include :DEFAULT explicitly. 
\par\li400 
\par\li400 e.g., Module.pm defines: 
\par\li400 
\par\plain\f3     @EXPORT      = qw(A1 A2 A3 A4 A5); 
\par     @EXPORT_OK   = qw(B1 B2 B3 B4 B5); 
\par     %EXPORT_TAGS = (T1 => [qw(A1 A2 B1 B2)], T2 => [qw(A1 A2 B3 B4)]); 
\par  
\par \plain\f0 \par\plain\f3     Note that you cannot use tags in @EXPORT or @EXPORT_OK. 
\par     Names in EXPORT_TAGS must also appear in @EXPORT or @EXPORT_OK. 
\par  
\par \plain\f0 \par\li400 An application using Module can say something like: 
\par\li400 
\par\plain\f3     use Module qw(:DEFAULT :T2 !B3 A3); 
\par  
\par \plain\f0 \par\li400 Other examples include: 
\par\li400 
\par\plain\f3     use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET); 
\par     use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/); 
\par  
\par \plain\f0 \par\li400 Remember that most patterns (using //) will need to be anchored 
with a leading ^, e.g., \plain\f3 /^EXIT/\plain\f0   rather than \plain\f3 /EXIT/\plain\f0  . 
\par\li400 
\par\li400 You can say \plain\f3 BEGIN { $Exporter::Verbose=1 }\plain\f0   to see how the 
specifications are being processed and what is actually being imported 
into modules. 
\par\li400 
\par
\par\plain\f2\fs24\cf1\li200\b Exporting without using Export's import method
\par\li400 
\par\plain\f2\fs24 \par\li400 Exporter has a special method, 'export_to_level' which is used in situations 
where you can't directly call Export's import method. The export_to_level 
method looks like: 
\par\li400 
\par\li400 MyPackage->export_to_level($where_to_export, @what_to_export); 
\par\li400 
\par\li400 where $where_to_export is an integer telling how far up the calling stack 
to export your symbols, and @what_to_export is an array telling what 
symbols *to* export (usually this is @_). 
\par\li400 
\par\li400 For example, suppose that you have a module, A, which already has an 
import function: 
\par\li400 
\par\li400 package A; 
\par\li400 
\par\li400 @ISA = qw(Exporter); 
@EXPORT_OK = qw ($b); 
\par\li400 
\par\li400 sub import 
{ 
    $A::b = 1;     # not a very useful import method 
} 
\par\li400 
\par\li400 and you want to Export symbol $A::b back to the module that called  
package A. Since Exporter relies on the import method to work, via  
inheritance, as it stands Exporter::import() will never get called.  
Instead, say the following: 
\par\li400 
\par\li400 package A; 
@ISA = qw(Exporter); 
@EXPORT_OK = qw ($b); 
\par\li400 
\par\li400 sub import 
{ 
    $A::b = 1; 
    A->export_to_level(1, @_); 
} 
\par\li400 
\par\li400 This will export the symbols one level 'above' the current package - ie: to  
the program or module that used package A. 
\par\li400 
\par\li400 Note: Be careful not to modify '@_' at all before you call export_to_level 
- or people using your package will get very unexplained results! 
\par\li400 
\par
\par\plain\f2\fs24\cf1\li200\b Module Version Checking
\par\li400 
\par\plain\f2\fs24 \par\li400 The Exporter module will convert an attempt to import a number from a 
module into a call to $module_name->require_version($value). This can 
be used to validate that the version of the module being used is 
greater than or equal to the required version. 
\par\li400 
\par\li400 The Exporter module supplies a default require_version method which 
checks the value of $VERSION in the exporting module. 
\par\li400 
\par\li400 Since the default require_version method treats the $VERSION number as 
a simple numeric value it will regard version 1.10 as lower than 
1.9. For this reason it is strongly recommended that you use numbers 
with at least two decimal places, e.g., 1.09. 
\par\li400 
\par
\par\plain\f2\fs24\cf1\li200\b Managing Unknown Symbols
\par\li400 
\par\plain\f2\fs24 \par\li400 In some situations you may want to prevent certain symbols from being 
exported. Typically this applies to extensions which have functions 
or constants that may not exist on some systems. 
\par\li400 
\par\li400 The names of any symbols that cannot be exported should be listed 
in the \plain\f3 @EXPORT_FAIL\plain\f0   array. 
\par\li400 
\par\li400 If a module attempts to import any of these symbols the Exporter 
will give the module an opportunity to handle the situation before 
generating an error. The Exporter will call an export_fail method 
with a list of the failed symbols: 
\par\li400 
\par\plain\f3   @failed_symbols = $module_name->export_fail(@failed_symbols); 
\par  
\par \plain\f0 \par\li400 If the export_fail method returns an empty list then no error is 
recorded and all the requested symbols are exported. If the returned 
list is not empty then an error is generated for each symbol and the 
export fails. The Exporter provides a default export_fail method which 
simply returns the list unchanged. 
\par\li400 
\par\li400 Uses for the export_fail method include giving better error messages 
for some symbols and performing lazy architectural checks (put more 
symbols into @EXPORT_FAIL by default and then take them out if someone 
actually tries to use them and an expensive check shows that they are 
usable on that platform). 
\par\li400 
\par
\par\plain\f2\fs24\cf1\li200\b Tag Handling Utility Functions
\par\li400 
\par\plain\f2\fs24 \par\li400 Since the symbols listed within %EXPORT_TAGS must also appear in either 
@EXPORT or @EXPORT_OK, two utility functions are provided which allow 
you to easily add tagged sets of symbols to @EXPORT or @EXPORT_OK: 
\par\li400 
\par\plain\f3   %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]); 
\par  
\par \plain\f0 \par\plain\f3   Exporter::export_tags('foo');     # add aa, bb and cc to @EXPORT 
\par   Exporter::export_ok_tags('bar');  # add aa, cc and dd to @EXPORT_OK 
\par  
\par \plain\f0 \par\li400 Any names which are not tags are added to @EXPORT or @EXPORT_OK 
unchanged but will trigger a warning (with \plain\f3 -w\plain\f0  ) to avoid misspelt tags 
names being silently added to @EXPORT or @EXPORT_OK. Future versions 
may make this a fatal error. 
\par\li400 
 